import os
import pytest
from fastapi.testclient import TestClient

from src.main import app

client = TestClient(app)

SAMPLE_SOURCE = "Este é um texto de origem. Ele contém duas frases."
SAMPLE_TARGET = "Este é um texto simplificado. Contém duas frases curtas."  # likely triggers some strategies


def _post(payload):
    return client.post("/api/v1/comparative-analysis/", json=payload)


def base_payload():
    return {
        "source_text": SAMPLE_SOURCE,
        "target_text": SAMPLE_TARGET,
        "analysis_options": {
            "include_strategy_identification": True,
            "include_semantic_analysis": True,
            "include_lexical_analysis": False,
            "include_syntactic_analysis": False,
            "include_readability_metrics": False
        }
    }


def test_strategy_ids_and_offsets_present():
    resp = _post(base_payload())
    assert resp.status_code == 200
    data = resp.json()
    strategies = data.get("simplification_strategies", [])
    for s in strategies:
        assert "strategy_id" in s and s["strategy_id"]
        # Offsets optional but if present must contain required keys
        for key in ["source_offsets", "target_offsets"]:
            if key in s and s[key]:
                for k in ["sentence", "char_start", "char_end"]:
                    assert k in s[key]
    assert "model_version" in data
    if data.get("detection_config"):
        assert "strategy_id_method" in data["detection_config"]


def test_guardrails_om_pro_absent_by_default():
    resp = _post(base_payload())
    assert resp.status_code == 200
    data = resp.json()
    codes = {s.get("code") or s.get("sigla") for s in data.get("simplification_strategies", [])}
    assert "OM+" not in codes
    assert "PRO+" not in codes


def test_enable_omission_via_env(monkeypatch):
    monkeypatch.setenv("HITL_ALLOW_AUTO_OMISSION", "true")
    resp = _post(base_payload())
    # Even if allowed, may not appear depending on heuristic, so we only check config reflection
    assert resp.status_code == 200
    cfg = resp.json().get("detection_config", {})
    assert cfg.get("allow_auto_omission") in (True, False)  # presence


def test_enable_problem_tag_never_default(monkeypatch):
    monkeypatch.setenv("HITL_ALLOW_AUTO_PROBLEM", "true")
    resp = _post(base_payload())
    assert resp.status_code == 200
    codes = {s.get("code") or s.get("sigla") for s in resp.json().get("simplification_strategies", [])}
    # PRO+ rarely generated by current detector; ensure not forced
    assert "PRO+" not in codes

