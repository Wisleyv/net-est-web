#!/usr/bin/env python3
"""
NET-est Backend Server - Vers√£o Definitiva Consolidada
Script de inicializa√ß√£o otimizado com configura√ß√µes centralizadas
Implementa todas as corre√ß√µes documentadas em docs_dev/
"""
import socket
import uvicorn
import sys
import os
from pathlib import Path

# Add src to path to import settings
sys.path.insert(0, str(Path(__file__).parent / "src"))

try:
    from core.config import Settings
    settings = Settings()
except ImportError:
    # Fallback configuration if imports fail
    print("‚ö†Ô∏è N√£o foi poss√≠vel carregar configura√ß√µes do .env, usando valores padr√£o")
    class FallbackSettings:
        HOST = "127.0.0.1"
        PORT = 8000
        FALLBACK_PORT = 8080
        RELOAD = True
        LOG_LEVEL = "INFO"
    settings = FallbackSettings()

def test_port(host, port):
    """Testa se uma porta est√° dispon√≠vel"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        s.bind((host, port))
        s.close()
        return True
    except (socket.error, OSError):
        return False

def get_available_port():
    """Retorna uma porta dispon√≠vel com fallback inteligente"""
    host = settings.HOST
    primary_port = settings.PORT
    fallback_port = settings.FALLBACK_PORT
    
    if test_port(host, primary_port):
        print(f"‚úÖ Porta {primary_port} dispon√≠vel")
        return primary_port
    elif test_port(host, fallback_port):
        print(f"‚ö†Ô∏è  Porta {primary_port} ocupada, usando {fallback_port}")
        return fallback_port
    else:
        print(f"‚ùå Ambas as portas ({primary_port}, {fallback_port}) est√£o ocupadas")
        return None

def main():
    """Fun√ß√£o principal de inicializa√ß√£o"""
    print("üöÄ NET-est Backend Server (Vers√£o Consolidada)")
    print("=" * 55)
    
    # Ensure we're in the correct directory
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    print(f"üìÅ Working directory: {os.getcwd()}")
    
    # Determinar porta dispon√≠vel
    port = get_available_port()
    if not port:
        print("üí° Consulte docs_dev/backend_windows_troubleshooting.md")
        print("üí° Ou tente fechar outros servi√ßos que usem as portas 8000/8080")
        return
    
    print(f"üîß Configura√ß√£o: {settings.HOST}:{port}")
    print(f"üìñ Documenta√ß√£o: http://{settings.HOST}:{port}/docs")
    print(f"üåê API Base: http://{settings.HOST}:{port}")
    print("üõë Para parar: Ctrl+C")
    print("-" * 55)
    
    # Iniciar servidor com path absoluto
    app_path = f"{script_dir}/src/main:app"
    uvicorn.run(
        "src.main:app",
        host=settings.HOST,
        port=port,
        reload=settings.RELOAD,
        log_level=settings.LOG_LEVEL.lower()
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Servidor interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        print("üí° Consulte docs_dev/backend_windows_troubleshooting.md")
