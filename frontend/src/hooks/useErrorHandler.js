/**
 * Error Handling Hook
 * Centralized error processing and user feedback
 */

import { useCallback } from 'react';
import useAppStore from '../stores/useAppStore';

export const useErrorHandler = () => {
  const { addNotification } = useAppStore();

  const handleError = useCallback((error, context = {}) => {
    console.error(`Error in ${context.component || 'unknown component'}:`, error);

    // Determine error type and message
    let errorMessage = 'Ocorreu um erro inesperado.';
    let errorTitle = 'Erro';
    let isNetworkError = false;

    if (error?.response) {
      // API Error Response
      const status = error.response.status;
      const data = error.response.data;
      
      switch (status) {
        case 400:
          errorTitle = 'Dados InvÃ¡lidos';
          errorMessage = data?.detail || 'Os dados fornecidos sÃ£o invÃ¡lidos.';
          break;
        case 401:
          errorTitle = 'NÃ£o Autorizado';
          errorMessage = 'VocÃª nÃ£o tem permissÃ£o para realizar esta aÃ§Ã£o.';
          break;
        case 403:
          errorTitle = 'Acesso Negado';
          errorMessage = 'Acesso negado para este recurso.';
          break;
        case 404:
          errorTitle = 'NÃ£o Encontrado';
          errorMessage = 'O recurso solicitado nÃ£o foi encontrado.';
          break;
        case 422:
          errorTitle = 'Erro de ValidaÃ§Ã£o';
          errorMessage = data?.detail || 'Erro na validaÃ§Ã£o dos dados.';
          break;
        case 429:
          errorTitle = 'Muitas RequisiÃ§Ãµes';
          errorMessage = 'VocÃª estÃ¡ fazendo muitas requisiÃ§Ãµes. Tente novamente em alguns momentos.';
          break;
        case 500:
          errorTitle = 'Erro do Servidor';
          errorMessage = 'Erro interno do servidor. Nossa equipe foi notificada.';
          break;
        case 502:
        case 503:
        case 504:
          errorTitle = 'ServiÃ§o IndisponÃ­vel';
          errorMessage = 'O serviÃ§o estÃ¡ temporariamente indisponÃ­vel. Tente novamente em alguns momentos.';
          isNetworkError = true;
          break;
        default:
          errorTitle = 'Erro HTTP';
          errorMessage = data?.detail || `Erro ${status}: ${error.response.statusText}`;
      }
    } else if (error?.code === 'NETWORK_ERROR' || !error?.response) {
      // Network Error
      errorTitle = 'Erro de ConexÃ£o';
      errorMessage = 'NÃ£o foi possÃ­vel conectar ao servidor. Verifique sua conexÃ£o de internet.';
      isNetworkError = true;
    } else if (error?.message) {
      // JavaScript Error
      errorMessage = error.message;
    }

    // Add contextual information
    if (context.operation) {
      errorMessage = `Erro ao ${context.operation}: ${errorMessage}`;
    }

    // Show notification
    addNotification({
      type: 'error',
      title: errorTitle,
      message: errorMessage,
      duration: isNetworkError ? 8000 : 6000, // Longer duration for network errors
      persistent: context.persistent || false,
    });

    // Log additional context in development
    if (process.env.NODE_ENV === 'development') {
      console.group('ðŸš¨ Error Context');
      console.log('Component:', context.component);
      console.log('Operation:', context.operation);
      console.log('Error Object:', error);
      console.log('Is Network Error:', isNetworkError);
      console.groupEnd();
    }

    return {
      message: errorMessage,
      title: errorTitle,
      isNetworkError,
      handled: true,
    };
  }, [addNotification]);

  const handleSuccess = useCallback((message, title = 'Sucesso') => {
    addNotification({
      type: 'success',
      title,
      message,
      duration: 4000,
    });
  }, [addNotification]);

  const handleWarning = useCallback((message, title = 'AtenÃ§Ã£o') => {
    addNotification({
      type: 'warning',
      title,
      message,
      duration: 6000,
    });
  }, [addNotification]);

  const handleInfo = useCallback((message, title = 'InformaÃ§Ã£o') => {
    addNotification({
      type: 'info',
      title,
      message,
      duration: 5000,
    });
  }, [addNotification]);

  return {
    handleError,
    handleSuccess,
    handleWarning,
    handleInfo,
  };
};

export default useErrorHandler;
